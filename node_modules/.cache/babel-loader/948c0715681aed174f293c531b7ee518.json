{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0 // celkove mnozstvi polozek.\n\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++; // je jedno jestli uz to mame v kosiku nebo ne => vzdy se celk. mnozstvi zvysi o 1.\n\n      if (existingItem) {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      } else {\n        state.items.push({\n          // pokud bych zapsala state.items = state.items.push(item), tak ziskam celkovy pocet. push() metoda vraci delku noveho arraye.\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          // predtim tam tahle polozka nebyla, takz ekdyz ji pridame poprve, tak celkova cena je rovna te cene polozky, protoze muzeme pridat jen 1.\n          name: newItem.title\n        });\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--; // je jedno jestli uz to mame v kosiku nebo ne => vzdy se celk. mnozstvi snizi o 1.\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id); // tady to naopak musim zapsat jako state.items = state.items.filter ... protoze return value je ten vyfiltrovany array a kdyz tam nedam to state.items = , tak se to nikam nezapise.\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/redux-projekt-2/01-starting-project (2)/01-starting-project/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","quantity","totalPrice","price","push","title","removeItemFromCart","filter","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,MAAMC,SAAS,GAAGF,WAAW,CAAC;AAC5BG,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,aAAa,EAAE,CAFH,CAEM;;AAFN,GAFc;AAM5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAArB;AACAP,MAAAA,KAAK,CAACH,aAAN,GAH2B,CAGJ;;AACvB,UAAIO,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAACI,QAAb;AACAJ,QAAAA,YAAY,CAACK,UAAb,GAA0BL,YAAY,CAACK,UAAb,GAA0BP,OAAO,CAACQ,KAA5D;AACD,OAHD,MAGO;AACLV,QAAAA,KAAK,CAACJ,KAAN,CAAYe,IAAZ,CAAiB;AACf;AACAJ,UAAAA,EAAE,EAAEL,OAAO,CAACK,EAFG;AAGfG,UAAAA,KAAK,EAAER,OAAO,CAACQ,KAHA;AAIfF,UAAAA,QAAQ,EAAE,CAJK;AAKfC,UAAAA,UAAU,EAAEP,OAAO,CAACQ,KALL;AAKY;AAC3BhB,UAAAA,IAAI,EAAEQ,OAAO,CAACU;AANC,SAAjB;AAQD;AACF,KAlBO;;AAmBRC,IAAAA,kBAAkB,CAACb,KAAD,EAAQC,MAAR,EAAgB;AAChC,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAP,MAAAA,KAAK,CAACH,aAAN,GAHgC,CAGT;;AACvB,UAAIO,YAAY,CAACI,QAAb,KAA0B,CAA9B,EAAiC;AAC/BR,QAAAA,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACJ,KAAN,CAAYkB,MAAZ,CAAoBR,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAzC,CAAd,CAD+B,CAC6B;AAC7D,OAFD,MAEO;AACLH,QAAAA,YAAY,CAACI,QAAb;AACAJ,QAAAA,YAAY,CAACK,UAAb,GAA0BL,YAAY,CAACK,UAAb,GAA0BL,YAAY,CAACM,KAAjE;AACD;AACF;;AA7BO;AANkB,CAAD,CAA7B;AAwCA,OAAO,MAAMK,WAAW,GAAGtB,SAAS,CAACuB,OAA9B;AACP,eAAevB,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { uiActions } from \"./ui-slice\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0, // celkove mnozstvi polozek.\r\n  },\r\n  reducers: {\r\n    addItemToCart(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.totalQuantity++; // je jedno jestli uz to mame v kosiku nebo ne => vzdy se celk. mnozstvi zvysi o 1.\r\n      if (existingItem) {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      } else {\r\n        state.items.push({\r\n          // pokud bych zapsala state.items = state.items.push(item), tak ziskam celkovy pocet. push() metoda vraci delku noveho arraye.\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price, // predtim tam tahle polozka nebyla, takz ekdyz ji pridame poprve, tak celkova cena je rovna te cene polozky, protoze muzeme pridat jen 1.\r\n          name: newItem.title,\r\n        });\r\n      }\r\n    },\r\n    removeItemFromCart(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n      state.totalQuantity--; // je jedno jestli uz to mame v kosiku nebo ne => vzdy se celk. mnozstvi snizi o 1.\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== id); // tady to naopak musim zapsat jako state.items = state.items.filter ... protoze return value je ten vyfiltrovany array a kdyz tam nedam to state.items = , tak se to nikam nezapise.\r\n      } else {\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\n\r\nexport const cartActions = cartSlice.actions;\r\nexport default cartSlice;\r\n"]},"metadata":{},"sourceType":"module"}