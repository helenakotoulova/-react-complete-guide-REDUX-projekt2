{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0 // celkove mnozstvi polozek.\n\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++; // je jedno jestli uz to mame v kosiku nebo ne => vzdy se celk. mnozstvi zvysi o 1.\n\n      if (existingItem) {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      } else {\n        state.items.push({\n          // pokud bych zapsala state.items = state.items.push(item), tak ziskam celkovy pocet. push() metoda vraci delku noveho arraye.\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          // predtim tam tahle polozka nebyla, takz ekdyz ji pridame poprve, tak celkova cena je rovna te cene polozky, protoze muzeme pridat jen 1.\n          name: newItem.title\n        });\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--; // je jedno jestli uz to mame v kosiku nebo ne => vzdy se celk. mnozstvi snizi o 1.\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id); // tady to naopak musim zapsat jako state.items = state.items.filter ... protoze return value je ten vyfiltrovany array a kdyz tam nedam to state.items = , tak se to nikam nezapise.\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n}); // ACTION CREATOR THUNK - thunk is a function that delays an action until later.\n// action creator function does not return the action itself but another function which eventually returns the action.\n// funkci sendCartData umistime mimo cartSlice, tzn. muzeme pouzit asynchronni funkce a side effects (http requests)\n// tato fce vraci dalsi fci - dispatch fci. tato funkce dispatchne notifikaci o sending data. pak je tam dalsi fce sendRequest, ktera fetchuje data. a davame na ni metodu try/catch.\n\nexport const sendCartData = cart => {\n  //return {type: '', payload: ...} // tohle je priklad action creatoru. redux je pro nase metody v reducers (napr. addItemToCart) dela automaticky.\n  // ale action creator muze byt i funkce, nejen objekt:\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending cart data...\"\n    })); // ten fetch ulozime do asynchronni fce sendRequest. abychom ji pak mohli trynout a catchnout pripadne errory.\n\n    const sendRequest = async () => {\n      const response = await fetch(\"https://redux-projekt-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        // 'put' is another method provided by firebase. new data will not be added as a list but it will overwrite existing data with new data.\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: \"success\",\n        title: \"Success\",\n        message: \"Sent cart data successfully.\"\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Sending cart data failed.\"\n      }));\n    }\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/redux-projekt-2/01-starting-project (2)/01-starting-project/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","quantity","totalPrice","price","push","title","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { uiActions } from \"./ui-slice\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0, // celkove mnozstvi polozek.\r\n  },\r\n  reducers: {\r\n    addItemToCart(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.totalQuantity++; // je jedno jestli uz to mame v kosiku nebo ne => vzdy se celk. mnozstvi zvysi o 1.\r\n      if (existingItem) {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      } else {\r\n        state.items.push({\r\n          // pokud bych zapsala state.items = state.items.push(item), tak ziskam celkovy pocet. push() metoda vraci delku noveho arraye.\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price, // predtim tam tahle polozka nebyla, takz ekdyz ji pridame poprve, tak celkova cena je rovna te cene polozky, protoze muzeme pridat jen 1.\r\n          name: newItem.title,\r\n        });\r\n      }\r\n    },\r\n    removeItemFromCart(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n      state.totalQuantity--; // je jedno jestli uz to mame v kosiku nebo ne => vzdy se celk. mnozstvi snizi o 1.\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== id); // tady to naopak musim zapsat jako state.items = state.items.filter ... protoze return value je ten vyfiltrovany array a kdyz tam nedam to state.items = , tak se to nikam nezapise.\r\n      } else {\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\n// ACTION CREATOR THUNK - thunk is a function that delays an action until later.\r\n// action creator function does not return the action itself but another function which eventually returns the action.\r\n// funkci sendCartData umistime mimo cartSlice, tzn. muzeme pouzit asynchronni funkce a side effects (http requests)\r\n// tato fce vraci dalsi fci - dispatch fci. tato funkce dispatchne notifikaci o sending data. pak je tam dalsi fce sendRequest, ktera fetchuje data. a davame na ni metodu try/catch.\r\nexport const sendCartData = (cart) => {\r\n  //return {type: '', payload: ...} // tohle je priklad action creatoru. redux je pro nase metody v reducers (napr. addItemToCart) dela automaticky.\r\n  // ale action creator muze byt i funkce, nejen objekt:\r\n  return async (dispatch) => { \r\n    dispatch(\r\n      uiActions.showNotification({\r\n        status: \"pending\",\r\n        title: \"Sending...\",\r\n        message: \"Sending cart data...\",\r\n      })\r\n    );\r\n\r\n    // ten fetch ulozime do asynchronni fce sendRequest. abychom ji pak mohli trynout a catchnout pripadne errory.\r\n    const sendRequest = async () => {\r\n      const response = await fetch(\r\n        \"https://redux-projekt-default-rtdb.firebaseio.com/cart.json\",\r\n        {\r\n          method: \"PUT\", // 'put' is another method provided by firebase. new data will not be added as a list but it will overwrite existing data with new data.\r\n          body: JSON.stringify(cart),\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Sending cart data failed.\");\r\n      }\r\n    };\r\n    try {\r\n      await sendRequest();\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"success\",\r\n          title: \"Success\",\r\n          message: \"Sent cart data successfully.\",\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Error!\",\r\n          message: \"Sending cart data failed.\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport const cartActions = cartSlice.actions;\r\nexport default cartSlice;\r\n"]},"metadata":{},"sourceType":"module"}