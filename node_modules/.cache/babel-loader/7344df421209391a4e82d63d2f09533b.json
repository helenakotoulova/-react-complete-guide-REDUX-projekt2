{"ast":null,"code":"import { createSlice } from \"react-redux\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0 // celkove mnozstvi polozek.\n\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n\n      if (existingItem) {\n        existingItem.quantity++;\n        existingItem.totalPrice = totalPrice + newItem.price;\n        state.totalQuantity++;\n      } else {\n        state.items.push({\n          // pokud bych zapsala state.items = state.items.push(item), tak ziskam celkovy pocet. push() metoda vraci delku noveho arraye.\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          // predtim tam tahle polozka nebyla, takz ekdyz ji pridame poprve, tak celkova cena je rovna te cene polozky, protoze muzeme pridat jen 1.\n          name: newItem.title\n        });\n        state.totalQuantity++;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n\n      if (existingItem.quantity === 1) {\n        state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/redux-projekt-2/01-starting-project (2)/01-starting-project/src/store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","quantity","totalPrice","price","push","itemId","title","removeItemFromCart","filter","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,aAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC5BE,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,aAAa,EAAE,CAFH,CAEM;;AAFN,GAFc;AAM5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAClBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EADX,CAArB;;AAGA,UAAIH,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAACI,QAAb;AACAJ,QAAAA,YAAY,CAACK,UAAb,GAA0BA,UAAU,GAAGP,OAAO,CAACQ,KAA/C;AACAV,QAAAA,KAAK,CAACH,aAAN;AACD,OAJD,MAIO;AACLG,QAAAA,KAAK,CAACJ,KAAN,CAAYe,IAAZ,CAAiB;AAAE;AACjBC,UAAAA,MAAM,EAAEV,OAAO,CAACK,EADD;AAEfG,UAAAA,KAAK,EAAER,OAAO,CAACQ,KAFA;AAGfF,UAAAA,QAAQ,EAAE,CAHK;AAIfC,UAAAA,UAAU,EAAEP,OAAO,CAACQ,KAJL;AAIY;AAC3BhB,UAAAA,IAAI,EAAEQ,OAAO,CAACW;AALC,SAAjB;AAOAb,QAAAA,KAAK,CAACH,aAAN;AACD;AACF,KApBO;;AAqBRiB,IAAAA,kBAAkB,CAACd,KAAD,EAAOC,MAAP,EAAe;AAC7B,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAArB;;AACA,UAAIH,YAAY,CAACI,QAAb,KAA0B,CAA9B,EAAiC;AAC7BR,QAAAA,KAAK,CAACJ,KAAN,CAAYmB,MAAZ,CAAmBT,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAAvC;AACH,OAFD,MAEO;AACHH,QAAAA,YAAY,CAACI,QAAb;AACAJ,QAAAA,YAAY,CAACK,UAAb,GAA0BL,YAAY,CAACK,UAAb,GAA0BL,YAAY,CAACM,KAAjE;AACH;AACJ;;AA9BO;AANkB,CAAD,CAA7B;AAwCA,OAAO,MAAMM,WAAW,GAAGvB,SAAS,CAACwB,OAA9B;AACP,eAAexB,SAAf","sourcesContent":["import { createSlice } from \"react-redux\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0, // celkove mnozstvi polozek.\r\n  },\r\n  reducers: {\r\n    addItemToCart(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find(\r\n        (item) => item.id === newItem.id\r\n      );\r\n      if (existingItem) {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = totalPrice + newItem.price;\r\n        state.totalQuantity++;\r\n      } else {\r\n        state.items.push({ // pokud bych zapsala state.items = state.items.push(item), tak ziskam celkovy pocet. push() metoda vraci delku noveho arraye.\r\n          itemId: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price, // predtim tam tahle polozka nebyla, takz ekdyz ji pridame poprve, tak celkova cena je rovna te cene polozky, protoze muzeme pridat jen 1.\r\n          name: newItem.title,\r\n        });\r\n        state.totalQuantity++;\r\n      }\r\n    },\r\n    removeItemFromCart(state,action) {\r\n        const id = action.payload;\r\n        const existingItem = state.items.find(item => item.id === id);\r\n        if (existingItem.quantity === 1) {\r\n            state.items.filter(item => item.id !== id);\r\n        } else {\r\n            existingItem.quantity--;\r\n            existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n        }\r\n    },\r\n  },\r\n});\r\n\r\nexport const cartActions = cartSlice.actions;\r\nexport default cartSlice;\r\n"]},"metadata":{},"sourceType":"module"}