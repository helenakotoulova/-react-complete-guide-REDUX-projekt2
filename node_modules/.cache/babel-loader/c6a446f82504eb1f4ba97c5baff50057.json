{"ast":null,"code":"import { uiActions } from \"./ui-slice\"; // ACTION CREATOR THUNK - thunk is a function that delays an action until later.\n// action creator function does not return the action itself but another function which eventually returns the action.\n// FUNKCE PRO PRIJIMANI (FETCHING) DAT\n\nexport const fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(\"https://redux-projekt-default-rtdb.firebaseio.com/cart.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Could not fetch cart data!\");\n      }\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      const cartData = await fetchData(); // tady nebudeme muset transformovat data, jako v jinych sekcich tohoto kurzu, protoze to co zde odesilame je ten redux snapshot - ten nas State. \n      // nevytvareli jsme totiz tady ten list of data pomoci POST metody, ale pouzili jsme metodu PUT, ktera ty data ulozi tak, jak jsou.\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Fetching cart data failed.\"\n      }));\n    }\n  };\n}; // FUNKCE PRO ODESILANI DAT\n// funkci sendCartData umistime mimo cartSlice, tzn. muzeme pouzit asynchronni funkce a side effects (http requests)\n// tato fce vraci dalsi fci - dispatch fci. tato funkce dispatchne notifikaci o sending data. pak je tam dalsi fce sendRequest, ktera fetchuje data. a davame na ni metodu try/catch.\n\nexport const sendCartData = cart => {\n  //return {type: '', payload: ...} // tohle je priklad action creatoru. redux je pro nase metody v reducers (napr. addItemToCart) dela automaticky.\n  // ale action creator muze byt i funkce, nejen objekt:\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending cart data...\"\n    })); // ten fetch ulozime do asynchronni fce sendRequest. abychom ji pak mohli trynout a catchnout pripadne errory.\n\n    const sendRequest = async () => {\n      const response = await fetch(\"https://redux-projekt-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        // 'put' is another method provided by firebase. new data will not be added as a list but it will overwrite existing data with new data.\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: \"success\",\n        title: \"Success\",\n        message: \"Sent cart data successfully.\"\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Sending cart data failed.\"\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/redux-projekt-2/01-starting-project (2)/01-starting-project/src/store/cart-actions.js"],"names":["uiActions","fetchCartData","dispatch","fetchData","response","fetch","ok","Error","data","json","cartData","error","showNotification","status","title","message","sendCartData","cart","sendRequest","method","body","JSON","stringify"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B,C,CACA;AACA;AAEA;;AACA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMC,SAAS,GAAG,YAAY;AAC5B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,6DAD0B,CAA5B;;AAIA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACA,aAAOD,IAAP;AACD,KAXD;;AAYA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMP,SAAS,EAAhC,CADE,CAEF;AACA;AACD,KAJD,CAIE,OAAOQ,KAAP,EAAc;AACdT,MAAAA,QAAQ,CACNF,SAAS,CAACY,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,OADiB;AAEzBC,QAAAA,KAAK,EAAE,QAFkB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADM,CAAR;AAOD;AACF,GA1BD;AA2BD,CA5BM,C,CA8BP;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAIC,IAAD,IAAU;AACpC;AACA;AACA,SAAO,MAAOf,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CACNF,SAAS,CAACY,gBAAV,CAA2B;AACzBC,MAAAA,MAAM,EAAE,SADiB;AAEzBC,MAAAA,KAAK,EAAE,YAFkB;AAGzBC,MAAAA,OAAO,EAAE;AAHgB,KAA3B,CADM,CAAR,CADyB,CASzB;;AACA,UAAMG,WAAW,GAAG,YAAY;AAC9B,YAAMd,QAAQ,GAAG,MAAMC,KAAK,CAC1B,6DAD0B,EAE1B;AACEc,QAAAA,MAAM,EAAE,KADV;AACiB;AACfC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;AAFR,OAF0B,CAA5B;;AAOA,UAAI,CAACb,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD;AACF,KAXD;;AAYA,QAAI;AACF,YAAMW,WAAW,EAAjB;AACAhB,MAAAA,QAAQ,CACNF,SAAS,CAACY,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,SADiB;AAEzBC,QAAAA,KAAK,EAAE,SAFkB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADM,CAAR;AAOD,KATD,CASE,OAAOJ,KAAP,EAAc;AACdT,MAAAA,QAAQ,CACNF,SAAS,CAACY,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,OADiB;AAEzBC,QAAAA,KAAK,EAAE,QAFkB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADM,CAAR;AAOD;AACF,GAxCD;AAyCD,CA5CM","sourcesContent":["import { uiActions } from \"./ui-slice\";\r\n// ACTION CREATOR THUNK - thunk is a function that delays an action until later.\r\n// action creator function does not return the action itself but another function which eventually returns the action.\r\n\r\n// FUNKCE PRO PRIJIMANI (FETCHING) DAT\r\nexport const fetchCartData = () => {\r\n  return async (dispatch) => {\r\n    const fetchData = async () => {\r\n      const response = await fetch(\r\n        \"https://redux-projekt-default-rtdb.firebaseio.com/cart.json\"\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Could not fetch cart data!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    };\r\n    try {\r\n      const cartData = await fetchData();\r\n      // tady nebudeme muset transformovat data, jako v jinych sekcich tohoto kurzu, protoze to co zde odesilame je ten redux snapshot - ten nas State. \r\n      // nevytvareli jsme totiz tady ten list of data pomoci POST metody, ale pouzili jsme metodu PUT, ktera ty data ulozi tak, jak jsou.\r\n    } catch (error) {\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Error!\",\r\n          message: \"Fetching cart data failed.\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\n// FUNKCE PRO ODESILANI DAT\r\n// funkci sendCartData umistime mimo cartSlice, tzn. muzeme pouzit asynchronni funkce a side effects (http requests)\r\n// tato fce vraci dalsi fci - dispatch fci. tato funkce dispatchne notifikaci o sending data. pak je tam dalsi fce sendRequest, ktera fetchuje data. a davame na ni metodu try/catch.\r\nexport const sendCartData = (cart) => {\r\n  //return {type: '', payload: ...} // tohle je priklad action creatoru. redux je pro nase metody v reducers (napr. addItemToCart) dela automaticky.\r\n  // ale action creator muze byt i funkce, nejen objekt:\r\n  return async (dispatch) => {\r\n    dispatch(\r\n      uiActions.showNotification({\r\n        status: \"pending\",\r\n        title: \"Sending...\",\r\n        message: \"Sending cart data...\",\r\n      })\r\n    );\r\n\r\n    // ten fetch ulozime do asynchronni fce sendRequest. abychom ji pak mohli trynout a catchnout pripadne errory.\r\n    const sendRequest = async () => {\r\n      const response = await fetch(\r\n        \"https://redux-projekt-default-rtdb.firebaseio.com/cart.json\",\r\n        {\r\n          method: \"PUT\", // 'put' is another method provided by firebase. new data will not be added as a list but it will overwrite existing data with new data.\r\n          body: JSON.stringify(cart),\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Sending cart data failed.\");\r\n      }\r\n    };\r\n    try {\r\n      await sendRequest();\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"success\",\r\n          title: \"Success\",\r\n          message: \"Sent cart data successfully.\",\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Error!\",\r\n          message: \"Sending cart data failed.\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}