{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    // celkove mnozstvi polozek.\n    changed: false\n  },\n  reducers: {\n    // ten replaceCart pouzijeme, kdyz znovu naloadujeme stranku, tak aby ty data zustaly (resp. znovu se objevily v kosiku). tzn. budeme tahat ulozena data z backendu (firebase).\n    replaceCart(state, action) {\n      state.totalQuantity = state.totalQuantity + action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++; // je jedno jestli uz to mame v kosiku nebo ne => vzdy se celk. mnozstvi zvysi o 1.\n\n      state.changed = true;\n\n      if (existingItem) {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      } else {\n        state.items.push({\n          // pokud bych zapsala state.items = state.items.push(item), tak ziskam celkovy pocet. push() metoda vraci delku noveho arraye.\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          // predtim tam tahle polozka nebyla, takz ekdyz ji pridame poprve, tak celkova cena je rovna te cene polozky, protoze muzeme pridat jen 1.\n          name: newItem.title\n        });\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--; // je jedno jestli uz to mame v kosiku nebo ne => vzdy se celk. mnozstvi snizi o 1.\n\n      state.changed = true;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id); // tady to naopak musim zapsat jako state.items = state.items.filter ... protoze return value je ten vyfiltrovany array a kdyz tam nedam to state.items = , tak se to nikam nezapise.\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/redux-projekt-2/01-starting-project (2)/01-starting-project/src/store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","changed","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","quantity","totalPrice","price","push","title","removeItemFromCart","filter","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC5BE,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,aAAa,EAAE,CAFH;AAEM;AAClBC,IAAAA,OAAO,EAAE;AAHG,GAFc;AAO5BC,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACzBD,MAAAA,KAAK,CAACJ,aAAN,GAAsBI,KAAK,CAACJ,aAAN,GAAsBK,MAAM,CAACC,OAAP,CAAeN,aAA3D;AACAI,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAAP,CAAeP,KAA7B;AACD,KALO;;AAMRQ,IAAAA,aAAa,CAACH,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMG,OAAO,GAAGH,MAAM,CAACC,OAAvB;AACA,YAAMG,YAAY,GAAGL,KAAK,CAACL,KAAN,CAAYW,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAA/C,CAArB;AACAR,MAAAA,KAAK,CAACJ,aAAN,GAH2B,CAGJ;;AACvBI,MAAAA,KAAK,CAACH,OAAN,GAAgB,IAAhB;;AACA,UAAIQ,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAACI,QAAb;AACAJ,QAAAA,YAAY,CAACK,UAAb,GAA0BL,YAAY,CAACK,UAAb,GAA0BN,OAAO,CAACO,KAA5D;AACD,OAHD,MAGO;AACLX,QAAAA,KAAK,CAACL,KAAN,CAAYiB,IAAZ,CAAiB;AACf;AACAJ,UAAAA,EAAE,EAAEJ,OAAO,CAACI,EAFG;AAGfG,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAHA;AAIfF,UAAAA,QAAQ,EAAE,CAJK;AAKfC,UAAAA,UAAU,EAAEN,OAAO,CAACO,KALL;AAKY;AAC3BlB,UAAAA,IAAI,EAAEW,OAAO,CAACS;AANC,SAAjB;AAQD;AACF,KAxBO;;AAyBRC,IAAAA,kBAAkB,CAACd,KAAD,EAAQC,MAAR,EAAgB;AAChC,YAAMO,EAAE,GAAGP,MAAM,CAACC,OAAlB;AACA,YAAMG,YAAY,GAAGL,KAAK,CAACL,KAAN,CAAYW,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAR,MAAAA,KAAK,CAACJ,aAAN,GAHgC,CAGT;;AACvBI,MAAAA,KAAK,CAACH,OAAN,GAAc,IAAd;;AACA,UAAIQ,YAAY,CAACI,QAAb,KAA0B,CAA9B,EAAiC;AAC/BT,QAAAA,KAAK,CAACL,KAAN,GAAcK,KAAK,CAACL,KAAN,CAAYoB,MAAZ,CAAoBR,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAzC,CAAd,CAD+B,CAC6B;AAC7D,OAFD,MAEO;AACLH,QAAAA,YAAY,CAACI,QAAb;AACAJ,QAAAA,YAAY,CAACK,UAAb,GAA0BL,YAAY,CAACK,UAAb,GAA0BL,YAAY,CAACM,KAAjE;AACD;AACF;;AApCO;AAPkB,CAAD,CAA7B;AA+CA,OAAO,MAAMK,WAAW,GAAGxB,SAAS,CAACyB,OAA9B;AACP,eAAezB,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0, // celkove mnozstvi polozek.\r\n    changed: false,\r\n  },\r\n  reducers: {\r\n    // ten replaceCart pouzijeme, kdyz znovu naloadujeme stranku, tak aby ty data zustaly (resp. znovu se objevily v kosiku). tzn. budeme tahat ulozena data z backendu (firebase).\r\n    replaceCart(state, action) {\r\n      state.totalQuantity = state.totalQuantity + action.payload.totalQuantity;\r\n      state.items = action.payload.items;\r\n    },\r\n    addItemToCart(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.totalQuantity++; // je jedno jestli uz to mame v kosiku nebo ne => vzdy se celk. mnozstvi zvysi o 1.\r\n      state.changed = true;\r\n      if (existingItem) {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      } else {\r\n        state.items.push({\r\n          // pokud bych zapsala state.items = state.items.push(item), tak ziskam celkovy pocet. push() metoda vraci delku noveho arraye.\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price, // predtim tam tahle polozka nebyla, takz ekdyz ji pridame poprve, tak celkova cena je rovna te cene polozky, protoze muzeme pridat jen 1.\r\n          name: newItem.title,\r\n        });\r\n      }\r\n    },\r\n    removeItemFromCart(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n      state.totalQuantity--; // je jedno jestli uz to mame v kosiku nebo ne => vzdy se celk. mnozstvi snizi o 1.\r\n      state.changed=true;\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== id); // tady to naopak musim zapsat jako state.items = state.items.filter ... protoze return value je ten vyfiltrovany array a kdyz tam nedam to state.items = , tak se to nikam nezapise.\r\n      } else {\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const cartActions = cartSlice.actions;\r\nexport default cartSlice;\r\n"]},"metadata":{},"sourceType":"module"}