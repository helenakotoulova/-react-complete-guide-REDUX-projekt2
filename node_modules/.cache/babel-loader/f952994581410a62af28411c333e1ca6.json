{"ast":null,"code":"var _jsxFileName = \"D:\\\\Helena\\\\IT\\\\React\\\\ReactKurzComplete\\\\redux-projekt-2\\\\01-starting-project (2)\\\\01-starting-project\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport Cart from \"./components/Cart/Cart\";\nimport Layout from \"./components/Layout/Layout\";\nimport Products from \"./components/Shop/Products\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect, Fragment } from \"react\";\nimport { uiActions } from \"./store/ui-slice\";\nimport Notification from \"./components/UI/Notification\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet isInitial = true; // zavedeme tuto promennou aby se nam pri prvnim naloadovani stranky neodesilala data na backend\n\nfunction App() {\n  _s();\n\n  const ui = useSelector(state => state.ui.cartIsVisible); // je to state.ui a ne state.uiSlice, protoze bereme ten nazev co mame ve storu v reducers.\n\n  const cart = useSelector(state => state.cart);\n  const notification = useSelector(state => state.ui.notification);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const sendCartData = async () => {\n      dispatch(uiActions.showNotification({\n        status: \"pending\",\n        title: \"Sending...\",\n        message: \"Sending cart data...\"\n      }));\n      const response = await fetch(\"https://redux-projekt-default-rtdb.firebaseio.com/cart\", {\n        method: \"PUT\",\n        // 'put' is another method provided by firebase. new data will not be added as a list but it will overwrite existing data with new data.\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      } //const responseData=await response.json(); // tohle nebudeme potrebovat\n\n\n      dispatch(uiActions.showNotification({\n        status: \"success\",\n        title: \"Success\",\n        message: \"Sent cart data successfully.\"\n      }));\n    };\n\n    if (isInitial) {\n      // pokud to bude ten initial load, tak neprobhene funkce SendCartData()\n      isInitial = false; // ale zaroven nastavime isInitial na false, aby se to pak pri zmenach toho cartu uz posilalo na backend.\n\n      return;\n    }\n\n    sendCartData().catch(error => {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Sending cart data failed.\"\n      }));\n    });\n  }, [cart, dispatch]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [notification && /*#__PURE__*/_jsxDEV(Notification, {\n      status: notification.status,\n      title: notification.title,\n      message: notification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      children: [ui && /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(Products, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"TTDCutDr2VbZhmFUs+GGGn9C6QY=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = App;\nexport default App;\n/*\nPosilani dat na backend (firebase) pomoci useEffect. kdyz se zmeni cart, tak se spusti useEffect.\nKazdopadne je zde problem: kdyz spustime nasi appku, tak se posle prazdny kosik na nas backend a prepise to any data stored there.\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/redux-projekt-2/01-starting-project (2)/01-starting-project/src/App.js"],"names":["Cart","Layout","Products","useSelector","useDispatch","useEffect","Fragment","uiActions","Notification","isInitial","App","ui","state","cartIsVisible","cart","notification","dispatch","sendCartData","showNotification","status","title","message","response","fetch","method","body","JSON","stringify","ok","Error","catch","error"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;AAEA,IAAIC,SAAS,GAAG,IAAhB,C,CAAsB;;AAEtB,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,EAAE,GAAGR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACD,EAAN,CAASE,aAArB,CAAtB,CADa,CAC8C;;AAE3D,QAAMC,IAAI,GAAGX,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACE,IAAlB,CAAxB;AACA,QAAMC,YAAY,GAAGZ,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACD,EAAN,CAASI,YAArB,CAAhC;AAEA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,YAAY,GAAG,YAAY;AAC/BD,MAAAA,QAAQ,CACNT,SAAS,CAACW,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,SADiB;AAEzBC,QAAAA,KAAK,EAAE,YAFkB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADM,CAAR;AAOA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,wDAD0B,EAE1B;AACEC,QAAAA,MAAM,EAAE,KADV;AACiB;AACfC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeb,IAAf;AAFR,OAF0B,CAA5B;;AAOA,UAAI,CAACQ,QAAQ,CAACM,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD,OAjB8B,CAmB/B;;;AACAb,MAAAA,QAAQ,CACNT,SAAS,CAACW,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,SADiB;AAEzBC,QAAAA,KAAK,EAAE,SAFkB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADM,CAAR;AAOD,KA3BD;;AA6BA,QAAIZ,SAAJ,EAAe;AACb;AACAA,MAAAA,SAAS,GAAG,KAAZ,CAFa,CAEM;;AACnB;AACD;;AAEDQ,IAAAA,YAAY,GAAGa,KAAf,CAAsBC,KAAD,IAAW;AAC9Bf,MAAAA,QAAQ,CACNT,SAAS,CAACW,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,OADiB;AAEzBC,QAAAA,KAAK,EAAE,QAFkB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADM,CAAR;AAOD,KARD;AASD,GA7CQ,EA6CN,CAACP,IAAD,EAAOE,QAAP,CA7CM,CAAT;AA+CA,sBACE,QAAC,QAAD;AAAA,eACGD,YAAY,iBACX,QAAC,YAAD;AACE,MAAA,MAAM,EAAEA,YAAY,CAACI,MADvB;AAEE,MAAA,KAAK,EAAEJ,YAAY,CAACK,KAFtB;AAGE,MAAA,OAAO,EAAEL,YAAY,CAACM;AAHxB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAQE,QAAC,MAAD;AAAA,iBACGV,EAAE,iBAAI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cADT,eAEE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAtEQD,G;UACIP,W,EAEEA,W,EACQA,W,EAEJC,W;;;KANVM,G;AAwET,eAAeA,GAAf;AAEA;AACA;AACA;AACA","sourcesContent":["import Cart from \"./components/Cart/Cart\";\nimport Layout from \"./components/Layout/Layout\";\nimport Products from \"./components/Shop/Products\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect, Fragment } from \"react\";\nimport { uiActions } from \"./store/ui-slice\";\nimport Notification from \"./components/UI/Notification\";\n\nlet isInitial = true; // zavedeme tuto promennou aby se nam pri prvnim naloadovani stranky neodesilala data na backend\n\nfunction App() {\n  const ui = useSelector((state) => state.ui.cartIsVisible); // je to state.ui a ne state.uiSlice, protoze bereme ten nazev co mame ve storu v reducers.\n\n  const cart = useSelector((state) => state.cart);\n  const notification = useSelector((state) => state.ui.notification);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const sendCartData = async () => {\n      dispatch(\n        uiActions.showNotification({\n          status: \"pending\",\n          title: \"Sending...\",\n          message: \"Sending cart data...\",\n        })\n      );\n      const response = await fetch(\n        \"https://redux-projekt-default-rtdb.firebaseio.com/cart\",\n        {\n          method: \"PUT\", // 'put' is another method provided by firebase. new data will not be added as a list but it will overwrite existing data with new data.\n          body: JSON.stringify(cart),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      }\n\n      //const responseData=await response.json(); // tohle nebudeme potrebovat\n      dispatch(\n        uiActions.showNotification({\n          status: \"success\",\n          title: \"Success\",\n          message: \"Sent cart data successfully.\",\n        })\n      );\n    };\n\n    if (isInitial) {\n      // pokud to bude ten initial load, tak neprobhene funkce SendCartData()\n      isInitial = false; // ale zaroven nastavime isInitial na false, aby se to pak pri zmenach toho cartu uz posilalo na backend.\n      return;\n    }\n\n    sendCartData().catch((error) => {\n      dispatch(\n        uiActions.showNotification({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Sending cart data failed.\",\n        })\n      );\n    });\n  }, [cart, dispatch]);\n\n  return (\n    <Fragment>\n      {notification && (\n        <Notification\n          status={notification.status}\n          title={notification.title}\n          message={notification.message}\n        />\n      )}\n      <Layout>\n        {ui && <Cart />}\n        <Products />\n      </Layout>\n    </Fragment>\n  );\n}\n\nexport default App;\n\n/*\nPosilani dat na backend (firebase) pomoci useEffect. kdyz se zmeni cart, tak se spusti useEffect.\nKazdopadne je zde problem: kdyz spustime nasi appku, tak se posle prazdny kosik na nas backend a prepise to any data stored there.\n*/\n"]},"metadata":{},"sourceType":"module"}