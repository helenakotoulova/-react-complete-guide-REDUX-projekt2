{"version":3,"sources":["components/Cart/CartItem.module.css","components/Shop/ProductItem.module.css","components/UI/Notification.module.css","components/Cart/CartButton.module.css","components/UI/Card.module.css","components/Cart/Cart.module.css","components/Layout/MainHeader.module.css","components/Shop/Products.module.css","store/ui-slice.js","store/cart-slice.js","store/index.js","components/UI/Card.js","components/Cart/CartItem.js","components/Cart/Cart.js","components/Cart/CartButton.js","components/Layout/MainHeader.js","components/Layout/Layout.js","components/Shop/ProductItem.js","components/Shop/Products.js","components/UI/Notification.js","App.js","store/cart-actions.js","index.js"],"names":["module","exports","uiSlice","createSlice","name","initialState","cartIsVisible","notification","reducers","toggle","state","showNotification","action","status","payload","title","message","uiActions","actions","cartSlice","items","totalQuantity","changed","replaceCart","addItemToCart","newItem","existingItem","find","item","id","quantity","totalPrice","price","push","removeItemFromCart","filter","cartActions","store","configureStore","reducer","ui","cart","Card","props","className","classes","card","children","CartItem","total","dispatch","useDispatch","toFixed","itemprice","details","onClick","Cart","cartItems","useSelector","map","CartButton","button","badge","MainHeader","header","Layout","ProductItem","description","DUMMY_PRODUCTS","Products","products","Notification","specialClasses","error","success","cssClasses","isInitial","App","useEffect","a","fetchData","fetch","response","ok","Error","json","data","cartData","sendRequest","method","body","JSON","stringify","sendCartData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.018e1e32.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CartItem_item__1oTIn\",\"details\":\"CartItem_details__3Ck7P\",\"quantity\":\"CartItem_quantity__14Klc\",\"price\":\"CartItem_price__qmoND\",\"itemprice\":\"CartItem_itemprice__19sJo\",\"actions\":\"CartItem_actions__2qe-X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ProductItem_item__1fifP\",\"price\":\"ProductItem_price__1tXHc\",\"actions\":\"ProductItem_actions__1L6s2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__uXzhu\",\"error\":\"Notification_error__2chRK\",\"success\":\"Notification_success__2q1hl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CartButton_button__llibK\",\"badge\":\"CartButton_badge__36tXx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3Wj3Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cart\":\"Cart_cart__1B_Du\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainHeader_header__2UrI8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"products\":\"Products_products__8yqYN\"};","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst uiSlice = createSlice({\r\n  name: \"ui\",\r\n  initialState: { cartIsVisible: false, notification: null },\r\n  reducers: {\r\n    toggle(state) {\r\n      state.cartIsVisible = !state.cartIsVisible;\r\n    },\r\n    showNotification(state, action) {\r\n      state.notification = {\r\n        status: action.payload.status,\r\n        title: action.payload.title,\r\n        message: action.payload.message,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nexport const uiActions = uiSlice.actions;\r\nexport default uiSlice;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0, // celkove mnozstvi polozek.\r\n    changed: false, // pridame tuto promennou, meli jsme totiz problem, ze kdyz jsme znovu naloadovali stranku, tak jsme sice data fetchnuli (prijmuli), ale zaroven jsme je i odeslali, coz nechceme.\r\n    // changed bude tim padem true jen pri adding/removing items. ale zustane false kdyz znovu loadujeme stranku.\r\n  },\r\n  reducers: {\r\n    // ten replaceCart pouzijeme, kdyz znovu naloadujeme stranku, tak aby ty data zustaly (resp. znovu se objevily v kosiku). tzn. budeme tahat ulozena data z backendu (firebase).\r\n    replaceCart(state, action) {\r\n      state.totalQuantity = state.totalQuantity + action.payload.totalQuantity;\r\n      state.items = action.payload.items;\r\n    },\r\n    addItemToCart(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.totalQuantity++; // je jedno jestli uz to mame v kosiku nebo ne => vzdy se celk. mnozstvi zvysi o 1.\r\n      state.changed = true;\r\n      if (existingItem) {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      } else {\r\n        state.items.push({\r\n          // pokud bych zapsala state.items = state.items.push(item), tak ziskam celkovy pocet. push() metoda vraci delku noveho arraye.\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price, // predtim tam tahle polozka nebyla, takz ekdyz ji pridame poprve, tak celkova cena je rovna te cene polozky, protoze muzeme pridat jen 1.\r\n          title: newItem.title,\r\n        });\r\n      }\r\n    },\r\n    removeItemFromCart(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n      state.totalQuantity--;\r\n      state.changed=true;\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== id); // tady to naopak musim zapsat jako state.items = state.items.filter ... protoze return value je ten vyfiltrovany array a kdyz tam nedam to state.items = , tak se to nikam nezapise.\r\n      } else {\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const cartActions = cartSlice.actions;\r\nexport default cartSlice;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport uiSlice from \"./ui-slice\";\r\nimport cartSlice from \"./cart-slice\";\r\n\r\nconst store = configureStore({\r\n  reducer: { ui: uiSlice.reducer, cart: cartSlice.reducer },\r\n});\r\n\r\nexport default store;\r\n","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return (\n    <section\n      className={`${classes.card} ${props.className ? props.className : ''}`}\n    >\n      {props.children}\n    </section>\n  );\n};\n\nexport default Card;\n","import classes from './CartItem.module.css';\nimport {useDispatch} from 'react-redux';\nimport { cartActions } from '../../store/cart-slice';\n\nconst CartItem = (props) => {\n  const { id, title, quantity, total, price } = props.item;\n\n  const dispatch = useDispatch();\n\n  const addToCartHandler = () => {\n    dispatch(cartActions.addItemToCart({\n      id,\n      title: title,\n      price,\n    }));\n  }\n\n  const removeFromCartHandler = () => {\n    dispatch(cartActions.removeItemFromCart(id));\n  }\n\n\n  return (\n    <li className={classes.item}>\n      <header>\n        <h3>{title}</h3>\n        <div className={classes.price}>\n          ${total.toFixed(2)}{' '}\n          <span className={classes.itemprice}>(${price.toFixed(2)}/item)</span>\n        </div>\n      </header>\n      <div className={classes.details}>\n        <div className={classes.quantity}>\n          x <span>{quantity}</span>\n        </div>\n        <div className={classes.actions}>\n          <button onClick={removeFromCartHandler}>-</button>\n          <button onClick={addToCartHandler}>+</button>\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default CartItem;\n","import Card from \"../UI/Card\";\nimport classes from \"./Cart.module.css\";\nimport CartItem from \"./CartItem\";\nimport { useSelector } from \"react-redux\";\n\nconst Cart = (props) => {\n  const cartItems = useSelector((state) => state.cart.items);\n\n  return (\n    <Card className={classes.cart}>\n      <h2>Your Shopping Cart</h2>\n      <ul>\n        {cartItems.map((item) => ( // zadame item jako objekt\n          <CartItem \n            key={item.id}\n            item={{\n              id: item.id,\n              title: item.title,\n              quantity: item.quantity,\n              total: item.totalPrice,\n              price: item.price,\n            }}\n          />\n        ))}\n      </ul>\n    </Card>\n  );\n};\n\nexport default Cart;\n","import classes from './CartButton.module.css';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { uiActions } from '../../store/ui-slice';\n\nconst CartButton = (props) => {\n  const dispatch = useDispatch();\n  const toggleCartHandler = () => {\n    dispatch(uiActions.toggle());\n  }\n\n  const totalQuantity = useSelector(state => state.cart.totalQuantity);\n\n  return (\n    <button className={classes.button} onClick={toggleCartHandler}>\n      <span>My Cart</span>\n      <span className={classes.badge}>{totalQuantity}</span>\n    </button>\n  );\n};\n\nexport default CartButton;\n","import CartButton from '../Cart/CartButton';\nimport classes from './MainHeader.module.css';\n\nconst MainHeader = (props) => {\n  return (\n    <header className={classes.header}>\n      <h1>ReduxCart</h1>\n      <nav>\n        <ul>\n          <li>\n            <CartButton />\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\nexport default MainHeader;\n","import { Fragment } from 'react';\nimport MainHeader from './MainHeader';\n\nconst Layout = (props) => {\n  return (\n    <Fragment>\n      <MainHeader />\n      <main>{props.children}</main>\n    </Fragment>\n  );\n};\n\nexport default Layout;\n","import Card from \"../UI/Card\";\nimport classes from \"./ProductItem.module.css\";\n\nimport { useDispatch} from \"react-redux\";\nimport { cartActions } from \"../../store/cart-slice\";\n\nconst ProductItem = (props) => {\n  const { title, price, description, id } = props;\n\n  const dispatch = useDispatch();\n\n  const addToCartHandler = () => {\n    dispatch(cartActions.addItemToCart({\n      id: id,\n      title: title,\n      price: price,\n    }));\n  };\n\n  return (\n    <li className={classes.item}>\n      <Card>\n        <header>\n          <h3>{title}</h3>\n          <div className={classes.price}>${price.toFixed(2)}</div>\n        </header>\n        <p>{description}</p>\n        <div className={classes.actions}>\n          <button onClick={addToCartHandler}>Add to Cart</button>\n        </div>\n      </Card>\n    </li>\n  );\n};\n\nexport default ProductItem;\n","import ProductItem from \"./ProductItem\";\nimport classes from \"./Products.module.css\";\n\nconst DUMMY_PRODUCTS = [\n  {\n    id: \"p1\",\n    price: 6,\n    title: \"My First Book\",\n    description: \"This is a first product - amazing!\",\n  },\n  {\n    id: \"p2\",\n    price: 5,\n    title: \"My Second Book\",\n    description: \"This is a second product - amazing!\",\n  },\n];\n\nconst Products = (props) => {\n  return (\n    <section className={classes.products}>\n      <h2>Buy your favorite products</h2>\n      <ul>\n        {DUMMY_PRODUCTS.map((item) => (\n          <ProductItem\n            key={item.id}\n            id={item.id}\n            price={item.price}\n            description={item.description}\n            title={item.title}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default Products;\n","import classes from './Notification.module.css';\r\n\r\nconst Notification = (props) => {\r\n  let specialClasses = '';\r\n\r\n  if (props.status === 'error') {\r\n    specialClasses = classes.error;\r\n  }\r\n  if (props.status === 'success') {\r\n    specialClasses = classes.success;\r\n  }\r\n\r\n  const cssClasses = `${classes.notification} ${specialClasses}`;\r\n\r\n  return (\r\n    <section className={cssClasses}>\r\n      <h2>{props.title}</h2>\r\n      <p>{props.message}</p>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Notification;","import Cart from \"./components/Cart/Cart\";\nimport Layout from \"./components/Layout/Layout\";\nimport Products from \"./components/Shop/Products\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect, Fragment } from \"react\";\nimport Notification from \"./components/UI/Notification\";\nimport { sendCartData, fetchCartData } from \"./store/cart-actions\";\n\nlet isInitial = true; // zavedeme tuto promennou aby se nam pri prvnim naloadovani stranky neodesilala data na backend. zavedeme ji mimo tu komponentu.\n\nfunction App() {\n  const ui = useSelector((state) => state.ui.cartIsVisible); // je to state.ui a ne state.uiSlice, protoze bereme ten nazev co mame ve storu v reducers.\n\n  const cart = useSelector((state) => state.cart);\n  const notification = useSelector((state) => state.ui.notification);\n\n  const dispatch = useDispatch();\n\n  // do tech useEffectu davama i tu dispatch funkci, ktera se sice nikdy nezmeni, ale pro kompletnost ji tam zahrneme\n  // tohle je useEffect pro prijimani (fetching data)\n  useEffect(() => {\n    dispatch(fetchCartData());\n  }, [dispatch]); // ta dispatch fce se nikdy nemeni, tzn. tento useEffect probehne jen pri initial loadovani stranky.\n\n  // pomoci action creator thunk - takhle je to lepsi, protoze tahle komponenta je vic lean a mame tu jen jednu dispatch akci. zbytek dispatchovani se odehrava v cart-slice\n  // tohle je useEffect pro sending data\n  useEffect(() => {\n    if (isInitial) {\n      isInitial = false;\n      return;\n    }\n    if (cart.changed) { // data budeme odesilat jen kdyz plati, ze changed = true (coz je v pripade adding/removing items), ale neni to pravda pri znovu naloadovani stranky.\n      // meli jsme totiz problem, ze kdyz jsme znovu naloadovali stranku, tak jsme sice data fetchnuli (prijmuli), ale zaroven jsme je i odeslali, coz nechceme.\n      dispatch(sendCartData(cart));\n    }\n    \n  }, [cart, dispatch]);\n\n  return (\n    <Fragment>\n      {notification && (\n        <Notification\n          status={notification.status}\n          title={notification.title}\n          message={notification.message}\n        />\n      )}\n      <Layout>\n        {ui && <Cart />}\n        <Products />\n      </Layout>\n    </Fragment>\n  );\n}\n\nexport default App;\n\n/*\nPosilani dat na backend (firebase) pomoci useEffect. kdyz se zmeni cart, tak se spusti useEffect.\nKazdopadne je zde problem: kdyz spustime nasi appku, tak se posle prazdny kosik na nas backend a prepise to any data stored there. to jsme pak vyresili tou variable is initial.\n\nTOHLE JE VERZE BEZ ACTION CREATOR THUNK: (jde tedy o zpusob, kdyz se pouziva fetching primo v komponente - ten kod jsme pak presunuli s drobnymi upravami do cart-actions jako action creators thunks)\nuseEffect(() => {\n    const sendCartData = async () => {\n      dispatch(\n        uiActions.showNotification({\n          status: \"pending\",\n          title: \"Sending...\",\n          message: \"Sending cart data...\",\n        })\n      );\n      const response = await fetch(\n        \"https://redux-projekt-default-rtdb.firebaseio.com/cart.json\",\n        {\n          method: \"PUT\", // 'put' is another method provided by firebase. new data will not be added as a list but it will overwrite existing data with new data.\n          body: JSON.stringify(cart),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      }\n\n      //const responseData=await response.json(); // tohle nebudeme potrebovat\n      dispatch(\n        uiActions.showNotification({\n          status: \"success\",\n          title: \"Success\",\n          message: \"Sent cart data successfully.\",\n        })\n      );\n    };\n\n    if (isInitial) {\n      // pokud to bude ten initial load, tak neprobhene funkce SendCartData()\n      isInitial = false; // ale zaroven nastavime isInitial na false, aby se to pak pri zmenach toho cartu uz posilalo na backend.\n      return;\n    }\n\n    sendCartData().catch((error) => {\n      dispatch(\n        uiActions.showNotification({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Sending cart data failed.\",\n        })\n      );\n    });\n  }, [cart, dispatch]);\n\n*/\n","import { uiActions } from \"./ui-slice\";\r\nimport { cartActions } from \"./cart-slice\";\r\n// ACTION CREATOR THUNK - thunk is a function that delays an action until later.\r\n// action creator function does not return the action itself but another function which eventually returns the action.\r\n\r\n// FUNKCE PRO PRIJIMANI (FETCHING) DAT\r\nexport const fetchCartData = () => {\r\n  return async (dispatch) => {\r\n    const fetchData = async () => {\r\n      const response = await fetch(\r\n        \"https://redux-projekt-default-rtdb.firebaseio.com/cart.json\"\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Could not fetch cart data!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    };\r\n    try {\r\n      const cartData = await fetchData();\r\n      // puvodne jsme to meli takhle: dispatch(cartActions.replaceCart(cartData)); // jenze kdyz vyprazdnime kosik a naloadujeme znovu stranku, dostaneme error ze nemuze aplikovat metodu find na undefined.\r\n      // proto to tady trochu upravime, aby kdyz je kosik prazdny byly items [] a ne undefined.\r\n      dispatch(\r\n        cartActions.replaceCart({\r\n          items: cartData.items || [],\r\n          totalQuantity: cartData.totalQuantity,\r\n        })\r\n      );\r\n\r\n      // tady nebudeme muset transformovat data, jako v jinych sekcich tohoto kurzu, protoze to co zde odesilame je ten redux snapshot - ten nas State.\r\n      // tzn. ma to spravny tvar. cartData = {items: [...], totalQuantity: xxx}\r\n      // nevytvareli jsme totiz tady ten list of data pomoci POST metody, ale pouzili jsme metodu PUT, ktera ty data ulozi tak, jak jsou.\r\n      // pote replacneme ten cart s temito daty.\r\n    } catch (error) {\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Error!\",\r\n          message: \"Fetching cart data failed.\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\n// FUNKCE PRO ODESILANI DAT\r\n// funkci sendCartData umistime mimo cartSlice, tzn. muzeme pouzit asynchronni funkce a side effects (http requests)\r\n// tato fce vraci dalsi fci - dispatch fci. tato funkce dispatchne notifikaci o sending data. pak je tam dalsi fce sendRequest, ktera fetchuje data. a davame na ni metodu try/catch.\r\nexport const sendCartData = (cart) => {\r\n  //return {type: '', payload: ...} // tohle je priklad action creatoru. redux je pro nase metody v reducers (napr. addItemToCart) dela automaticky.\r\n  // ale action creator muze byt i funkce, nejen objekt:\r\n  return async (dispatch) => {\r\n    dispatch(\r\n      uiActions.showNotification({\r\n        status: \"pending\",\r\n        title: \"Sending...\",\r\n        message: \"Sending cart data...\",\r\n      })\r\n    );\r\n\r\n    // ten fetch ulozime do asynchronni fce sendRequest. abychom ji pak mohli trynout a catchnout pripadne errory.\r\n    const sendRequest = async () => {\r\n      const response = await fetch(\r\n        \"https://redux-projekt-default-rtdb.firebaseio.com/cart.json\",\r\n        {\r\n          method: \"PUT\", // 'put' is another method provided by firebase. new data will not be added as a list but it will overwrite existing data with new data.\r\n          // puvodne tu bylo JSON.stringify(cart), ale abychom neodesilali i tu novou promennou 'changed', trochu to zmenime:\r\n          body: JSON.stringify({\r\n            items: cart.items,\r\n            totalQuantity: cart.totalQuantity,\r\n          }),\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Sending cart data failed.\");\r\n      }\r\n    };\r\n    try {\r\n      await sendRequest();\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"success\",\r\n          title: \"Success\",\r\n          message: \"Sent cart data successfully.\",\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Error!\",\r\n          message: \"Sending cart data failed.\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n","import ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport store from './store/index';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n"],"sourceRoot":""}